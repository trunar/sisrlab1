lexer grammar CPPLexer;

CONST : 'const';
TYPES : 'int' | 'float' | 'char' | 'string' | 'bool' | 'double';

PLUS : '+';
MINUS : '-';
MULTIPLY : '*';
DIVIDE : '/';
MODULO : '%';
ASSIGN : '=';

IF : 'if';
ELSE : 'else';
WHILE : 'while';
FOR : 'for';

VOID : 'void';
RETURN : 'return';

LPAREN : '(';
RPAREN : ')';
LBRACE : '{';
RBRACE : '}';
LBRACK : '[';
RBRACK : ']';
SEMI : ';';
COMMA : ',';
HASH : '#';
LESSTHAN : '<';
MORETHAN : '>';
QUOTE: '"';
LOGICAL_AND : '&&';
LOGICAL_OR : '||';
LOGICAL_NOT : '!';
TRUE : 'true';
FALSE : 'false';

SPACETAB : [ \t\r\n] -> skip;

LINE_COMMENT : '//' .*? '\n' -> skip;
BLOCK_COMMENT : '/*' .*? '*/' -> skip;

INTEGER_LITERAL : [0-9]+;
FLOAT_LITERAL : [0-9]+'.'[0-9]+;
CHARACTER_LITERAL : '\'' . '\'';
STRING_LITERAL : '"' .*? '"';

IDENTIFIER : [a-zA-Z_][a-zA-Z0-9_]*;

FUNCTION: TYPES IDENTIFIER LPAREN RPAREN;
VARIABLEDECL : TYPES IDENTIFIER (ASSIGN EXPRESSION)? SEMI;
CONSTANTDECL : CONST TYPES IDENTIFIER ASSIGN EXPRESSION SEMI;

CONDITIONAL_EXPRESSION : LOGICAL_OR_EXPRESSION;
LOGICAL_OR_EXPRESSION : LOGICAL_AND_EXPRESSION (LOGICAL_OR LOGICAL_AND_EXPRESSION)*;
LOGICAL_AND_EXPRESSION : EQUALITY_EXPRESSION (LOGICAL_AND EQUALITY_EXPRESSION)*;
EQUALITY_EXPRESSION : RELATIONAL_EXPRESSION ((LOGICAL_NOT | LESSTHAN | MORETHAN) RELATIONAL_EXPRESSION)?;
RELATIONAL_EXPRESSION : ADDITIVE_EXPRESSION ((LESSTHAN | MORETHAN | LESSTHAN ASSIGN | MORETHAN ASSIGN) ADDITIVE_EXPRESSION)?;


EXPRESSION : ADDITIVE_EXPRESSION;
ADDITIVE_EXPRESSION : MULTIPLICATIVE_EXPRESSION ((PLUS | MINUS) MULTIPLICATIVE_EXPRESSION);
MULTIPLICATIVE_EXPRESSION : PRIMARY_EXPRESSION ((MULTIPLY | DIVIDE) PRIMARY_EXPRESSION);
PRIMARY_EXPRESSION : IDENTIFIER | INTEGER_LITERAL | FLOAT_LITERAL | CHARACTER_LITERAL | LPAREN EXPRESSION RPAREN;